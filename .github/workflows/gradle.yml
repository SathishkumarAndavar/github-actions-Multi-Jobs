# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
    - name: Build source code into jar file with Maven
      run: |
           gradle build
           ls
           tree
           mkdir artifacts && cp build/libs/*.jar artifacts
           cd artifacts && ls
        
    - name: Saving the artifact 
      uses: actions/upload-artifact@v2
      with:
        name: Springboot artifact
        path: artifacts
        
  Pushing-Artifact-to-Jfrog_Repo:
    name: Pushing-Artifact-to-Jfrog_Repo
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: Springboot artifact
    #  - run: ls
          
      - name: Setting up Jfrog-CLI
        uses: jfrog/setup-jfrog-cli@v2
      #run: jf --version
      - name: Pushing the built artifact to Jfrog repository
        run: |
            docker login -u renuka.prasad@cloudzenix.com -p Prasad@123 cloudzenix.jfrog.io
            jf rt upload *jar maven-build --url=https://cloudzenix.jfrog.io/artifactory/ --user=renuka.prasad@cloudzenix.com --password=Prasad@123
      #run: jf rt upload artifacts/cz-springboot-welcome.jar maven-demo --url=cloudzenix.jfrog.io --user=renuka.prasad@cloudzenix.com --password=Prasad@123
  
 
